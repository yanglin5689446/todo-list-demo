{"version":3,"sources":["components/Search/index.js","constants.js","components/TaskActions/index.js","components/Todo/index.js","components/TaskEditModal/index.js","App.js","serviceWorker.js","index.js"],"names":["Search","value","onChange","className","type","placeholder","defaultProps","STATUSES","label","badgeType","TaskActions","filter","onTaskAdding","onFilterChange","useState","dropdownOpen","setDropdownOpen","onClick","classNames","map","status","index","key","Todo","title","description","onDelete","onEdit","TaskEditModal","task","open","setOpen","onUpdate","onSave","tabIndex","role","e","stopPropagation","aria-label","cols","rows","id","NEW_TASK","App","setFilter","search","setSearch","modalOpen","setModalOpen","tasks","setTasks","editing","setEditing","searchRegex","RegExp","replace","filtedTasksEntries","Object","entries","test","useEffect","state","JSON","parse","localStorage","getItem","setItem","stringify","editTask","useCallback","editingTask","0","updateTask","field","target","saveTask","idMax","keys","n","parseInt","reduce","a","b","Math","max","deleteTask","newTasks","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dddd5af6.chunk.js","sourcesContent":["\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Search = ({ value, onChange }) => (\n  <div className=\"search\">\n    <div className=\"input-group mb-3\">\n      <input \n        type=\"text\" \n        placeholder=\"Search for a task\" \n        className=\"form-control\" \n        value={value} \n        onChange={onChange} \n      />\n      <div className=\"input-group-append\">\n        <button className=\"btn btn-outline-secondary\" type=\"button\">\n          <i className=\"fa fa-search\" />\n        </button>\n      </div>\n    </div>\n  </div>\n)\n\nSearch.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n}\n\nSearch.defaultProps = {\n  value: '',\n  onChange: () => null\n}\n\nexport default Search","\nexport const STATUSES = [\n  { label: 'incoming', badgeType: 'primary' },\n  { label: 'progressing', badgeType: 'info' },\n  { label: 'done', badgeType: 'success' },\n  { label: 'pending', badgeType: 'warning' },\n]","\nimport React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { STATUSES } from '../../constants'\n\nconst TaskActions = ({ filter, onTaskAdding, onFilterChange }) => {\n  const [dropdownOpen, setDropdownOpen] = useState(false)\n  return (\n    <div className=\"task-actions d-flex justify-content-between align-items-center\">\n      <div className=\"add-task\">\n        <button className=\"btn btn-primary\" onClick={onTaskAdding}>\n          <i className=\"fa fa-plus pr-1\" /> Add a task\n        </button>\n      </div>\n      <div className=\"filter-tasks\">\n        <div className=\"dropdown\">\n          <button \n            className=\"btn btn-outline-secondary dropdown-toggle\" \n            type=\"button\" \n            onClick={() => setDropdownOpen(!dropdownOpen)}\n          >\n            <i className=\"fas fa-filter\" />\n          </button>\n          <div className={classNames(\"dropdown-menu\", dropdownOpen && 'show')} >\n            {\n              STATUSES.map((status, index) => (\n                <li \n                  key={index}\n                  className={classNames(\"dropdown-item cursor-pointer\", filter === index && 'active')}\n                  onClick={() => onFilterChange(index)}\n                >\n                  { status.label }\n                </li>\n              ))\n            }\n            <li className=\"dropdown-item cursor-pointer\" onClick={() => onFilterChange(null) }>\n              reset filter\n            </li>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nTaskActions.propTypes = {\n  filter: PropTypes.number,\n  onTaskAdding: PropTypes.func,\n  onFilterChange: PropTypes.func,\n}\n\nTaskActions.defaultProps = {\n  filter: null,\n  onTaskAdding: () => null,\n  onFilterChange: () => null,\n}\n\nexport default TaskActions","\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { STATUSES } from '../../constants'\n\nconst Todo = ({ title, status, description, onDelete, onEdit }) => (\n  <div className=\"card mb-1\">\n    <div className=\"card-header d-flex justify-content-between\">\n      <div>\n        <span className={`badge badge-${STATUSES[status].badgeType} mr-1`}>\n          { STATUSES[status].label }\n        </span>\n        { title }\n      </div>\n      <div className=\"actions\">\n        <i className=\"far fa-edit ml-2\" onClick={onEdit}/>\n        <i className=\"fa fa-trash ml-2\" onClick={onDelete}/>\n      </div>\n    </div>\n    <div className=\"card-body\">\n      <p className=\"card-text\">\n        { description }\n      </p>\n    </div>\n  </div>\n)\n\nTodo.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  status: PropTypes.number.isRequired,\n  onDelete: PropTypes.func,\n  onEdit: PropTypes.func,\n}\n\nTodo.defaultProps = {\n  onDelete: () => null,\n  onEdit: () => null,\n}\n\nexport default Todo","\nimport React from 'react'\nimport classNames from 'classnames'\nimport PropTypes from 'prop-types'\nimport { STATUSES } from '../../constants'\n\nconst TaskEditModal = ({ task, open, setOpen, onUpdate, onSave }) => (\n  <div \n    className={classNames(\"modal\", open && \"d-block\")}\n    tabIndex=\"-1\" \n    role=\"dialog\" \n    onClick={() => setOpen(false)}\n  >\n    <div className=\"modal-dialog\" role=\"document\" onClick={e => e.stopPropagation()}>\n      <div className=\"modal-content\">\n        <div className=\"modal-header\">\n          <h5 className=\"modal-title\">\n            Create a task\n          </h5>\n          <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={() => setOpen(false)}>\n            <i className=\"fa fa-times\" />\n          </button>\n        </div>\n        <div className=\"modal-body\">\n          <label >Title</label>\n          <input type=\"text\" className=\"form-control\" value={task.title || ''} onChange={onUpdate('title')} />\n          <label >Description</label>\n          <textarea \n            className=\"form-control\" \n            cols=\"10\" rows=\"5\" \n            value={task.description || ''} \n            onChange={onUpdate('description')} \n          />\n          <label >Status</label>\n          <select className='form-control' value={task.status } onChange={onUpdate('status')}>\n            {\n              STATUSES.map((status, id) => <option key={id} value={id}>{status.label}</option>)\n            }\n          </select>\n        </div>\n        <div className=\"modal-footer\">\n          <button type=\"button\" className=\"btn btn-secondary\" onClick={() => setOpen(false)}>\n            Close\n          </button>\n          <button type=\"button\" className=\"btn btn-primary\" onClick={onSave}>\n            Save\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n)\n\nTaskEditModal.propTypes = {\n  task: PropTypes.object.isRequired,\n  open: PropTypes.bool.isRequired,\n  setOpen: PropTypes.func.isRequired,\n  onUpdate: PropTypes.func,\n  onSave: PropTypes.func,\n}\n\nTaskEditModal.defaultProps = {\n  onUpdate: () => null,\n  onSave: () => null,\n}\n\nexport default TaskEditModal","import React, { useState, useCallback, useEffect } from 'react'\n\nimport Search from './components/Search'\nimport TaskActions from './components/TaskActions'\nimport Todo from './components/Todo'\nimport TaskEditModal from './components/TaskEditModal'\n\nconst NEW_TASK = { title: '', description: '', status: 0 }\n\nconst App = () => {\n  \n  const [filter, setFilter] = useState(null)\n  const [search, setSearch] = useState('')\n  const [modalOpen, setModalOpen] = useState(false)\n  const [tasks, setTasks] = useState({})\n  const [editing, setEditing] = useState(null)\n\n  const searchRegex = new RegExp(search.replace(/\\\\/g, ''))\n  const filtedTasksEntries = Object\n    .entries(tasks)\n    .filter(([id]) => ~~id !== 0)\n    // apply keyword search\n    .filter(([, { title, description}]) => searchRegex.test(title) || searchRegex.test(description))\n    // apply filter\n    .filter(([, { status }]) => !filter || ~~status === ~~filter)\n  \n  // dehydrate state from localStorage, only execute once\n  useEffect(() => {\n    const state = JSON.parse(localStorage.getItem('state'))\n    if (state) {\n      setFilter(state.filter)\n      setSearch(state.search)\n      setModalOpen(state.modalOpen)\n      setTasks(state.tasks)\n      setEditing(state.editing)\n    }\n  }, [])\n\n  // cache state to localStorage\n  useEffect(() => {\n    localStorage.setItem('state', JSON.stringify({\n      filter, search, modalOpen, tasks, editing,\n    }))\n  })\n\n  const editTask = useCallback(id => {\n    setEditing(id)\n    const editingTask = id ? { ...tasks[id] } : NEW_TASK\n    setTasks({ ...tasks, 0: editingTask  })\n    setModalOpen(true)\n  }, [tasks])\n  \n  const updateTask = useCallback((field) => e => {\n    setTasks({ \n      ...tasks, \n      0: {\n        ...tasks[0],\n        [field]: e.target.value,\n      }\n    })\n  }, [tasks])\n\n  const saveTask = useCallback(() => {\n    if(editing){\n      setTasks({ ...tasks, [editing]: { ...tasks[0] } })\n    }\n    else {\n      const idMax = Object.keys(tasks)\n        .map(n => parseInt(n))\n        .reduce((a, b) => Math.max(a, b), 0)\n      setTasks({ ...tasks, [idMax + 1]: { ...tasks[0] } })\n    }\n    setModalOpen(false)\n  }, [editing, tasks])\n\n  const deleteTask = useCallback((id) => {\n    const { [id]: discard, ...newTasks } = tasks\n    setTasks(newTasks)\n  }, [tasks])\n\n  return (\n    <div>\n      <nav className=\"navbar navbar-dark bg-primary  navbar-expand-lg\">\n        <span className=\"navbar-brand\">Yang's todo-list</span>\n      </nav>\n      <div className=\"container py-3\">\n        <Search value={search} onChange={e => setSearch(e.target.value)} />\n\n        <TaskActions \n          onTaskAdding={() => editTask(0)}\n          onFilterChange={setFilter}\n          filter={filter}\n        />\n\n        <div className=\"todo-list py-3\">\n          { !filtedTasksEntries.length && (\n              <div className='text-center'>\n                <span role='img' aria-label='hands'>🙌</span>\n                 Hooray! Todo List is empty! \n                <span role='img' aria-label='hands'>🙌</span>\n              </div>\n            ) \n          }\n          { \n            filtedTasksEntries\n              .map(([id, task]) => (\n                <Todo \n                  key={id}\n                  onEdit={() => editTask(id)}\n                  onDelete={() => deleteTask(id)}\n                  {...task} \n                />\n              ))\n          }\n        </div>\n      </div>\n      <TaskEditModal \n        task={editing !== null ? tasks[0] : {}}\n        open={modalOpen}\n        setOpen={setModalOpen}\n        onUpdate={updateTask}\n        onSave={saveTask}\n      />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './main.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}